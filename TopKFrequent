class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        // Problem : https://leetcode.com/problems/top-k-frequent-elements/submissions/
        // sort the array and then itrate it and find the k most time element
        // this takes time o(nlogn + n) which is o(nlogn)
        // create hashmap and store count of each element and priority queue
        // prepare result array so time and space complexity will be o(nlogn)
        // space complexity will be o(n)
        
        Map<Integer,Integer> map = new HashMap<>();
        for(int n : nums){
            map.put(n,map.getOrDefault(n,0)+1) ;           
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->map.get(b)-map.get(a));
        pq.addAll(map.keySet());
        int[] result= new int[k];
        for(int i=0;i<k;i++){
            result[i]=pq.poll();
        }
        return result;
    }
}
