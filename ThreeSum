class Solution {
    // problem : https://leetcode.com/problems/3sum/submissions/
    // brute force is o(n3) 
    // better solution is sort the array
    // pick one by one element and then use two pointer in rest of the array
    // to find the remaining sum
    // this way complexity will be nlong + n2 which is o(n2)
    // space complexity if we consider sorting then may be o(n) 
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> targetTriplets = new ArrayList<>();
        int n = nums.length;
        Arrays.sort(nums);

        for (int i = 0; i < n - 2; i++) {
            if (i == 0 || nums[i] != nums[i - 1]) {
                findTriplets(nums, i, targetTriplets, n);
            }
        }

        return targetTriplets;
    }

    private void findTriplets(int[] nums, int startIdx, List<List<Integer>> targetTriplets, int n) {
        int left = startIdx + 1;
        int right = n - 1;

        while (left < right) {
            int sum = nums[startIdx] + nums[left] + nums[right];

            if (sum == 0) {
                targetTriplets.add(Arrays.asList(nums[startIdx], nums[left], nums[right]));
                left = getNextIndex(nums, left, true, n);
                right = getNextIndex(nums, right, false, n);
            } else if (sum < 0) {
                left++;
            } else if (sum > 0) {
                right--;
            }
        }
    }

    private int getNextIndex(int[] nums, int index, boolean increment, int n) {
        int newIndex = index;
        while (increment ? newIndex < n - 1 && nums[newIndex] == nums[newIndex + 1] 
                         : newIndex > 0 && nums[newIndex] == nums[newIndex - 1]) {
            newIndex += increment ? 1 : -1;
        }
        return newIndex + (increment ? 1 : -1);
    }
}
